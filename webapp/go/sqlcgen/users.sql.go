// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package sqlcgen

import (
	"context"
)

const createUsers = `-- name: CreateUsers :execrows
INSERT INTO users (id, username, firstname, lastname, date_of_birth, access_token, invitation_code) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateUsersParams struct {
	ID             string
	Username       string
	Firstname      string
	Lastname       string
	DateOfBirth    string
	AccessToken    string
	InvitationCode string
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (int64, error) {
	result, err := q.db.Exec(ctx, createUsers,
		arg.ID,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.DateOfBirth,
		arg.AccessToken,
		arg.InvitationCode,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getUserByInvitationCode = `-- name: GetUserByInvitationCode :one
SELECT id, username, firstname, lastname, date_of_birth, access_token, invitation_code, created_at, updated_at FROM users WHERE invitation_code = ?
`

func (q *Queries) GetUserByInvitationCode(ctx context.Context, invitationCode string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByInvitationCode, invitationCode)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.DateOfBirth,
		&i.AccessToken,
		&i.InvitationCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
